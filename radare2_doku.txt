==== doing on stack_bof_01 ====

  *using rabin2 to show the binary architecture
  *<code>rabin2 -I stack_bof_01</code>
  *shows things like
    *pic
    *canary
    *nx
    *crypto
  *as we now the architecture and address length
  *<code>radare2 -a mips -b 32 stack_bof_01</code>

==First Steps==

  *we have to analyze all at first
  *<code>aa</code>

  *now we can list all functions
  *<code>afl</code>
  *<spoiler>
<code>0x00400630 194308   9  sym._ftext
0x00400690 196304   7  sym.__do_global_dtors_aux
0x00400748 196304   5  sym.frame_dummy
0x004009d0 196304   9  sym.__do_global_ctors_aux
0x0040059c 193240  11  sym._init
0x004007e0 199384  11  sym.main
0x00400ab0 193240  11  sym._fini
0x00400950 196304   7  sym.dat_shell
0x00400a90 157248   3  sym.imp.exit
0x00400a80 157248   3  sym.imp.memset
0x00400a70 157248   3  sym.imp.__uClibc_main
0x00400a60 157248   3  sym.imp.system
0x00400a50 157248   3  sym.imp.puts
0x00400a40 157248   3  sym.imp.printf
0x00400a30 157248   3  sym.imp.strcpy
</code>
</spoiler>

  *now we can take one of the functions and examine
  *<code>pdf @ sym.main</code>
  *as it's to many lines to examine we can look at only a few
  *<code>pd 40 @ sym.main</code>







==== radare reference ====

=== V - visual mode ===


=== i - get info from opened file ===
  *show infos for various data
  
  *<code>izz</code>
  *output all strings

===help===
  *using questionmark to show possibilites
  *<code>a?</code>
  *<code>af?</code>

=== .radare2rc ===


<code>
# Show comments at right of disassembly if they fit in screen
e asm.cmtright=true

# Shows pseudocode in disassembly. Eg mov eax, str.ok = > eax = str.ok
e asm.pseudo = true

# Display stack and register values on top of disassembly view (visual mode)
#e cmd.stack = true

# Solarized theme
eco solarized

# Use UTF-8 to show cool arrows that do not look like crap :)
e scr.utf8 = true
</code>
