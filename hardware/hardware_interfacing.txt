===== Hardware Hacking =====

% The Interface % Purpose %
| Serial Interface | Debug outputs |
||Shells|
| i2c and SPI | EEPROM data sniffing and injection |
|| Memory Dumping |
|| Debug output |
|| Device Management |
| JTAG | Firmware Dumping |
|| Firmware Upgrades |
|| Testing and Debugging the device |


==== NAND Glitching ====

  *popular technique to get to the root shell
  *devices often don't have root by default
  *short NAND 29th pin to the ground

  *as soon as it starts booting now, it will fail to load kernel image and drops to u-boot shell


==== Bootloader ====

  *when arriving in bootloader shell
  *useful commands:
    *<code>printenv</code>
    *show booting environment
    *changing boot arguments
    *<code>setenv bootargs 'noinitrd console=ttyAM0, 115200 rootfstype=ubifs ubi.mtd=5 root=ubi0:rootfs rw gpmi init=/bin/sh';</code>



==== UART Universal Asynchronous receiver Transmitter ====
  * hardware or software based UART
  * consists of:
    *start bit (low pulse - 0)
    *data content (8 bit data)
    *parity bit
    *end bit (high pulse - 1)

  *characteristic for UART are 4 pins (GND,RX,TX,Vcc)
  
=== Identify Pins ===

== Identify Ground ==
  *take multimeter and configure it in CT (continuous test mode)
  *place the GND probe (black) on any metallic surface
  *place the Vcc probe (red) to the port to identify desired pin
  *wait for the beep

== Identify Vcc ==
  *isn't used for connecting serial interface, but identifying helps searching for Tx and Rx
  *power on the device
  *take multimeter and configure it in Voltage mode (20V)
  *search for 3.3V

== Identify Tx ==
  *take multimeter and configure it in Voltage mode (20V)
  *now we have to find variations of voltage, due to different amount of bit transmissions


==== Tools ====

=== baudrate.py ===

  *find baudrate of a connected device 


===== Resources =====

====IOT Security====
  *blog with vulnerable devices
  *<code>http://www.exploitee.rs</code>




